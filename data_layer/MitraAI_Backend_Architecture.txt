
# MitraAI Backend - Current Working Architecture Summary

## 🧠 Overview

This backend handles:
- Saving user mood ratings to a SQLite database.
- Saving and retrieving conversation summaries as vector embeddings using FAISS.
- Exposing RESTful APIs using FastAPI.

---

## 🔗 API Endpoints

### 1. Save Mood
- **Endpoint**: `POST /api/mood/save`
- **Description**: Stores mood ratings (mood_1, mood_2, mood_3) for a user.
- **Body**:
```json
{
  "user_id": "user123",
  "mood_1": 7,
  "mood_2": 5,
  "mood_3": 8
}
```

### 2. Get Mood Trend
- **Endpoint**: `GET /api/mood/trend/{user_id}`
- **Description**: Returns timestamped mood trends for the user.

### 3. Save Summary
- **Endpoint**: `POST /api/summary/save`
- **Description**: Takes a text summary, converts it into a 1536-dim embedding, and stores it in FAISS for the user.
- **Note**: If a summary already exists for the user, it is replaced (upsert).

### 4. Get Summary Embedding
- **Endpoint**: `GET /api/summary/{user_id}`
- **Description**: Returns the FAISS vector embedding for the user’s saved summary.

### 5. Get Summary Text
- **Endpoint**: `GET /api/summary/text/{user_id}`
- **Description**: Returns the raw summary text for the user.

---

## 🛢️ Database Layer

### SQLite: `sqlite_handler.py`
- Stores mood ratings in a table with columns: `user_id`, `mood_1`, `mood_2`, `mood_3`, and `timestamp`.
- Provides methods: `insert_mood_rating`, `get_mood_trend`.

### FAISS: `faiss_handler.py`
- Stores and retrieves 1536-dim embeddings of user summaries.
- Maintains three mapping dicts:
  - `user_id_map`: maps user IDs to FAISS index positions.
  - `user_embeddings`: keeps in-memory user embeddings.
  - `user_summaries`: stores the actual summary text.
- All mappings and FAISS index are persisted using `pickle` and stored in the `db/embeddings/` directory.

#### Files used:
- `summary.index`: FAISS vector index
- `user_id_map.pkl`: user to index map
- `user_embeddings.pkl`: stores user embeddings
- `user_summaries.pkl`: stores summary texts

---

## ✅ Summary

- The system is working end-to-end: mood ratings and summary embeddings are being correctly stored and retrieved.
- FAISS allows fast similarity search for future expansion.
- Only the latest summary per user is retained to save space.

---

## 📁 Directory Structure
```
MitraAi1/
├── data_layer/               # Formerly mitra_backend
│   ├── main.py
│   ├── db/
│   │   ├── sqlite_handler.py
│   │   └── faiss_handler.py
│   ├── models/
│   ├── routes.py
│   ├── schemas.py
│   └── venv/
```

